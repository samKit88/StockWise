generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("CONNECTION_STRING")
}

model brand {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  inventory inventory[]
}

model category {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  inventory inventory[]
}

model image {
  id          Int        @id @default(autoincrement())
  imageURL    String
  inventoryId Int?
  userId      Int?       @unique
  inventory   inventory? @relation(fields: [inventoryId], references: [id])
  users       users?     @relation(fields: [userId], references: [id])
}

model inventory {
  id           Int      @id @default(autoincrement())
  userId       Int
  name         String
  barcode      String
  categoryId   Int
  brandId      Int
  buyingPrice  Decimal  @db.Money
  sellingPrice Decimal  @db.Money
  productUnit  Unit
  quantity     Int
  minStock     Int      @default(10)
  taxType      Tax
  description  String
  productType  Product
  image        image[]
  brand        brand    @relation(fields: [brandId], references: [id])
  category     category @relation(fields: [categoryId], references: [id])
  users        users    @relation(fields: [userId], references: [id])
}

model otp {
  id         Int      @id @default(autoincrement())
  userId     Int
  otpCode    Int
  expiryDate DateTime
  users      users    @relation(fields: [userId], references: [id])

  @@unique([userId, otpCode])
}

model users {
  id           Int         @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String      @unique
  hash         String
  hashedRT     String?
  isSuperAdmin Boolean     @default(false)
  isBanned     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  image        image?
  inventory    inventory[]
  otp          otp[]
}

enum Product {
  Sale
  Use
}

enum Tax {
  taxable
  nonTaxable
}

enum Unit {
  pieces
  kilograms
  liters
  boxes
  meters
}
